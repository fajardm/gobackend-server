// Code generated by MockGen. DO NOT EDIT.
// Source: container.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Startup mocks base method
func (m *MockService) Startup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Startup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Startup indicates an expected call of Startup
func (mr *MockServiceMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockService)(nil).Startup))
}

// Shutdown mocks base method
func (m *MockService) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockServiceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockService)(nil).Shutdown))
}

// MockContainer is a mock of Container interface
type MockContainer struct {
	ctrl     *gomock.Controller
	recorder *MockContainerMockRecorder
}

// MockContainerMockRecorder is the mock recorder for MockContainer
type MockContainerMockRecorder struct {
	mock *MockContainer
}

// NewMockContainer creates a new mock instance
func NewMockContainer(ctrl *gomock.Controller) *MockContainer {
	mock := &MockContainer{ctrl: ctrl}
	mock.recorder = &MockContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContainer) EXPECT() *MockContainerMockRecorder {
	return m.recorder
}

// Ready mocks base method
func (m *MockContainer) Ready() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockContainerMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockContainer)(nil).Ready))
}

// GetService mocks base method
func (m *MockContainer) GetService(id string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockContainerMockRecorder) GetService(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockContainer)(nil).GetService), id)
}

// RegisterService mocks base method
func (m *MockContainer) RegisterService(id string, svc interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", id, svc)
}

// RegisterService indicates an expected call of RegisterService
func (mr *MockContainerMockRecorder) RegisterService(id, svc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockContainer)(nil).RegisterService), id, svc)
}

// RegisterServices mocks base method
func (m *MockContainer) RegisterServices(services map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterServices", services)
}

// RegisterServices indicates an expected call of RegisterServices
func (mr *MockContainerMockRecorder) RegisterServices(services interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServices", reflect.TypeOf((*MockContainer)(nil).RegisterServices), services)
}

// Shutdown mocks base method
func (m *MockContainer) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockContainerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockContainer)(nil).Shutdown))
}

// GracefulShutdown mocks base method
func (m *MockContainer) GracefulShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulShutdown")
}

// GracefulShutdown indicates an expected call of GracefulShutdown
func (mr *MockContainerMockRecorder) GracefulShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulShutdown", reflect.TypeOf((*MockContainer)(nil).GracefulShutdown))
}
