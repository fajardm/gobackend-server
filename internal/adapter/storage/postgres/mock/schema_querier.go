// Code generated by MockGen. DO NOT EDIT.
// Source: schema_querier.go

// Package mock is a generated GoMock package.
package mock

import (
	schema "github.com/fajardm/gobackend-server/internal/domain/schema"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSchemaQuerier is a mock of SchemaQuerier interface
type MockSchemaQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaQuerierMockRecorder
}

// MockSchemaQuerierMockRecorder is the mock recorder for MockSchemaQuerier
type MockSchemaQuerierMockRecorder struct {
	mock *MockSchemaQuerier
}

// NewMockSchemaQuerier creates a new mock instance
func NewMockSchemaQuerier(ctrl *gomock.Controller) *MockSchemaQuerier {
	mock := &MockSchemaQuerier{ctrl: ctrl}
	mock.recorder = &MockSchemaQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchemaQuerier) EXPECT() *MockSchemaQuerierMockRecorder {
	return m.recorder
}

// AllClasses mocks base method
func (m *MockSchemaQuerier) AllClasses() (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllClasses")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AllClasses indicates an expected call of AllClasses
func (mr *MockSchemaQuerierMockRecorder) AllClasses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllClasses", reflect.TypeOf((*MockSchemaQuerier)(nil).AllClasses))
}

// FindClassByName mocks base method
func (m *MockSchemaQuerier) FindClassByName(className schema.ClassName) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClassByName", className)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindClassByName indicates an expected call of FindClassByName
func (mr *MockSchemaQuerierMockRecorder) FindClassByName(className interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClassByName", reflect.TypeOf((*MockSchemaQuerier)(nil).FindClassByName), className)
}

// ExistsClass mocks base method
func (m *MockSchemaQuerier) ExistsClass(className schema.ClassName) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsClass", className)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExistsClass indicates an expected call of ExistsClass
func (mr *MockSchemaQuerierMockRecorder) ExistsClass(className interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsClass", reflect.TypeOf((*MockSchemaQuerier)(nil).ExistsClass), className)
}

// CreateSchemaTableIfNotExists mocks base method
func (m *MockSchemaQuerier) CreateSchemaTableIfNotExists() (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchemaTableIfNotExists")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSchemaTableIfNotExists indicates an expected call of CreateSchemaTableIfNotExists
func (mr *MockSchemaQuerierMockRecorder) CreateSchemaTableIfNotExists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchemaTableIfNotExists", reflect.TypeOf((*MockSchemaQuerier)(nil).CreateSchemaTableIfNotExists))
}

// CreateClassTableIfNotExists mocks base method
func (m *MockSchemaQuerier) CreateClassTableIfNotExists(data schema.Schema) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClassTableIfNotExists", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateClassTableIfNotExists indicates an expected call of CreateClassTableIfNotExists
func (mr *MockSchemaQuerierMockRecorder) CreateClassTableIfNotExists(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClassTableIfNotExists", reflect.TypeOf((*MockSchemaQuerier)(nil).CreateClassTableIfNotExists), data)
}

// CreateRelationTableIfNotExists mocks base method
func (m *MockSchemaQuerier) CreateRelationTableIfNotExists(className schema.ClassName, fieldName schema.FieldName) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRelationTableIfNotExists", className, fieldName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelationTableIfNotExists indicates an expected call of CreateRelationTableIfNotExists
func (mr *MockSchemaQuerierMockRecorder) CreateRelationTableIfNotExists(className, fieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelationTableIfNotExists", reflect.TypeOf((*MockSchemaQuerier)(nil).CreateRelationTableIfNotExists), className, fieldName)
}

// CreateIndexIfNotExists mocks base method
func (m *MockSchemaQuerier) CreateIndexIfNotExists(className schema.ClassName, indexName string, columns []schema.FieldName, unique bool) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexIfNotExists", className, indexName, columns, unique)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIndexIfNotExists indicates an expected call of CreateIndexIfNotExists
func (mr *MockSchemaQuerierMockRecorder) CreateIndexIfNotExists(className, indexName, columns, unique interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexIfNotExists", reflect.TypeOf((*MockSchemaQuerier)(nil).CreateIndexIfNotExists), className, indexName, columns, unique)
}

// AddFieldIfNotExists mocks base method
func (m *MockSchemaQuerier) AddFieldIfNotExists(className schema.ClassName, fieldName schema.FieldName, field schema.Field) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFieldIfNotExists", className, fieldName, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddFieldIfNotExists indicates an expected call of AddFieldIfNotExists
func (mr *MockSchemaQuerierMockRecorder) AddFieldIfNotExists(className, fieldName, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFieldIfNotExists", reflect.TypeOf((*MockSchemaQuerier)(nil).AddFieldIfNotExists), className, fieldName, field)
}

// CreateSchema mocks base method
func (m *MockSchemaQuerier) CreateSchema(data schema.Schema) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchema", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSchema indicates an expected call of CreateSchema
func (mr *MockSchemaQuerierMockRecorder) CreateSchema(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockSchemaQuerier)(nil).CreateSchema), data)
}

// UpdateSchema mocks base method
func (m *MockSchemaQuerier) UpdateSchema(data schema.Schema) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchema", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSchema indicates an expected call of UpdateSchema
func (mr *MockSchemaQuerierMockRecorder) UpdateSchema(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockSchemaQuerier)(nil).UpdateSchema), data)
}

// DropFieldIfExists mocks base method
func (m *MockSchemaQuerier) DropFieldIfExists(className schema.ClassName, fieldName schema.FieldName) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropFieldIfExists", className, fieldName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DropFieldIfExists indicates an expected call of DropFieldIfExists
func (mr *MockSchemaQuerierMockRecorder) DropFieldIfExists(className, fieldName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropFieldIfExists", reflect.TypeOf((*MockSchemaQuerier)(nil).DropFieldIfExists), className, fieldName)
}

// DropIndexesIfExists mocks base method
func (m *MockSchemaQuerier) DropIndexesIfExists(indexes ...string) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range indexes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropIndexesIfExists", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DropIndexesIfExists indicates an expected call of DropIndexesIfExists
func (mr *MockSchemaQuerierMockRecorder) DropIndexesIfExists(indexes ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndexesIfExists", reflect.TypeOf((*MockSchemaQuerier)(nil).DropIndexesIfExists), indexes...)
}

// DropTablesIfExists mocks base method
func (m *MockSchemaQuerier) DropTablesIfExists(classNames ...schema.ClassName) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range classNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTablesIfExists", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DropTablesIfExists indicates an expected call of DropTablesIfExists
func (mr *MockSchemaQuerierMockRecorder) DropTablesIfExists(classNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTablesIfExists", reflect.TypeOf((*MockSchemaQuerier)(nil).DropTablesIfExists), classNames...)
}

// DeleteSchema mocks base method
func (m *MockSchemaQuerier) DeleteSchema(className schema.ClassName) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchema", className)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSchema indicates an expected call of DeleteSchema
func (mr *MockSchemaQuerierMockRecorder) DeleteSchema(className interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockSchemaQuerier)(nil).DeleteSchema), className)
}
